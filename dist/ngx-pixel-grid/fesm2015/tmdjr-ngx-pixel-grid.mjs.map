{"version":3,"file":"tmdjr-ngx-pixel-grid.mjs","sources":["../../../projects/ngx-pixel-grid/src/lib/classes/pixel-grid.ts","../../../projects/ngx-pixel-grid/src/lib/ngx-pixel-grid.service.ts","../../../projects/ngx-pixel-grid/src/lib/ngx-pixel-grid.component.ts","../../../projects/ngx-pixel-grid/src/lib/ngx-pixel-grid.module.ts","../../../projects/ngx-pixel-grid/src/public-api.ts","../../../projects/ngx-pixel-grid/src/tmdjr-ngx-pixel-grid.ts"],"sourcesContent":["import { IPixelGrid, ISize, ITile } from '../interfaces/ngx-pixel-grid';\n\nexport class PixelGrid implements IPixelGrid {\n  constructor(public rows: number, public columns: number, public gutter: number) { }\n\n  buildTilesMatrix(\n    tileSize: ISize,\n    tileColor: string,\n    tileHoverColor: string,\n  ): ITile[][] {\n    const tilesMatrix: ITile[][] = [];\n    for (let row = 0; row < this.rows; row++) {\n      tilesMatrix[row] = [];\n      for (let column = 0; column < this.columns; column++) {\n        tilesMatrix[row][column] = {\n          id: (row * this.columns + column).toString(),\n          isPixel: false,\n          coordinates: {\n            x: (tileSize.width + this.gutter) * column,\n            y: (tileSize.height + this.gutter) * row\n          },\n          size: tileSize,\n          color: tileColor,\n          hoverColor: tileHoverColor,\n          tooltipText: `Tile ${row * this.columns + column}`\n        };        \n      }\n    }\n    return tilesMatrix;\n  }\n}\n","import { Inject, Injectable, InjectionToken, Optional } from '@angular/core';\nimport { PixelGrid } from './classes/pixel-grid';\nimport { IPixelGridOptions, IPixelGridService, ISize, ITile } from './interfaces/ngx-pixel-grid';\n\nexport const NGX_PIXEL_GRID_OPTIONS = new InjectionToken<IPixelGridOptions>('NGX_PIXEL_GRID_OPTIONS');\nconst defaultOptions: IPixelGridOptions = {\n  introAnimation: true,\n  gutter: 1,\n  rows: 100,\n  columns: 100,\n  tileSize: { width: 10, height: 10 },\n  tileColor: 'rgb(140, 140, 140)',\n  tileHoverColor: 'rgb(70, 70, 70)'\n};\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class NgxPixelGridService implements IPixelGridService {\n\n  constructor(@Optional() @Inject(NGX_PIXEL_GRID_OPTIONS) options: IPixelGridOptions) { \n    options && Object.assign(this.options, options);\n  }\n  options = defaultOptions;\n\n  buildTilesMatrix(): { pixelGrid: PixelGrid, tilesMatrix: ITile[][] } {\n    const {\n      columns, rows, gutter,\n      tileSize, tileColor, tileHoverColor\n  } = this.options\n    const pixelGrid = new PixelGrid(columns, rows, gutter);\n    const tilesMatrix = pixelGrid.buildTilesMatrix(tileSize, tileColor, tileHoverColor);\n    return { pixelGrid, tilesMatrix};\n  }\n\n  getPixelGridSize(tilesMatrix: ITile[][], gutter: number): ISize {\n    const width = tilesMatrix[0].length * tilesMatrix[0][0].size.width + (tilesMatrix[0].length - 1) * gutter;\n    const height = tilesMatrix.length * tilesMatrix[0][0].size.height + (tilesMatrix.length - 1) * gutter;\n    return { width, height };\n  }\n\n  mergeTilesMatrix(tilesMatrix: ITile[][], tiles: ITile[]): ITile[][] {\n    tiles.forEach((tile: ITile) => {\n      const tileCoordinates = tile.coordinates;\n      const { x, y } = tileCoordinates;\n      const _tile = tilesMatrix[x][y];\n      Object.assign(_tile, {\n        isPixel: true,\n        img: tile.img,\n        color: 'rbg(0, 0, 0)',\n        href: tile.href,\n        tooltipText: tile.tooltipText\n      });\n    });\n    return tilesMatrix;\n  }\n\n  whatTileIsMouseOver(tilesMatrix: ITile[][], rect: DOMRect, event: MouseEvent): ITile | undefined {\n    const x = event.clientX - rect.left;\n    const y = event.clientY - rect.top;\n\n    let returnTile: ITile | undefined;\n    tilesMatrix.forEach((row) => {\n      row.forEach((tile) => {\n        if (x >= tile.coordinates.x && x <= tile.coordinates.x + tile.size.width &&\n            y >= tile.coordinates.y && y <= tile.coordinates.y + tile.size.height) {\n            returnTile = tile;\n          }\n      });\n    });\n    return returnTile;\n  }\n\n  phyllotaxisLayout(tilesMatrix: ITile[][], xOffset = 0, yOffset = 0, iOffset = 0): ITile[][] {\n    // theta determines the spiral of the layout\n    const theta = Math.PI * (3 - Math.sqrt(5));\n    const pointRadius = this.options.tileSize.width / 2;\n  \n    tilesMatrix.forEach((row, i) => {\n      const index = (i + iOffset) % tilesMatrix.length;\n      const phylloX = pointRadius * Math.sqrt(index) * Math.cos(index * theta);\n      const phylloY = pointRadius * Math.sqrt(index) * Math.sin(index * theta);\n      row.forEach(tile => {\n        tile.coordinates.x = xOffset + phylloX - pointRadius;\n        tile.coordinates.y = yOffset + phylloY - pointRadius;\n      });\n    });\n  \n    return tilesMatrix;\n  }\n}\n\n\n\n","import { Overlay, OverlayRef } from '@angular/cdk/overlay';\nimport { ComponentPortal } from '@angular/cdk/portal';\nimport {\n  AfterViewInit,\n  ChangeDetectionStrategy,\n  Component,\n  ElementRef,\n  EventEmitter,\n  HostListener,\n  Input,\n  NgZone,\n  Output,\n  ViewChild\n} from '@angular/core';\nimport { PixelGrid } from './classes/pixel-grid';\nimport { ISize, ITile, ITileClickEvent } from './interfaces/ngx-pixel-grid';\nimport { NgxPixelGridService } from './ngx-pixel-grid.service';\n\n@Component({\n  selector: 'ngx-pixel-grid',\n  template: `\n  <div #pixelGridCanvasContatiner class=\"pixel-grid-canvas-container\">\n    <canvas #pixelGridCanvas></canvas>\n  </div>`,\n  styles: ['.pixel-grid-canvas-container { width: 100%; height: 100%; }'],\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class NgxPixelGridComponent implements AfterViewInit {\n\n  constructor(\n    private ngZone: NgZone,\n    private pixelGridService: NgxPixelGridService,\n    private tooltipOverlay: Overlay\n  ) { }\n  \n  @Output() tileClick = new EventEmitter<ITileClickEvent>();\n\n  @Input() set pixels(tiles: ITile[]) {\n    if (!tiles || !tiles.length) return;\n    this.tilesMatrix = this.pixelGridService.mergeTilesMatrix(\n      this.tilesMatrix,\n      tiles\n    );\n  }\n\n  @ViewChild('pixelGridCanvasContatiner') pixelGridCanvasContatiner!: ElementRef<HTMLDivElement>;\n  @ViewChild('pixelGridCanvas') pixelGridCanvas!: ElementRef<HTMLCanvasElement>;\n\n  ctx!: CanvasRenderingContext2D;\n  pixelGrid!: PixelGrid;\n  tilesMatrix!: ITile[][];\n\n  tooltipRef!: OverlayRef;\n  tooltipPortal = new ComponentPortal(NgxPixelGridTooltipComponent);\n\n  @HostListener('window:resize')\n  onResize() {\n    const pixelGridSize = this.pixelGridService.getPixelGridSize(this.tilesMatrix, this.pixelGrid.gutter);\n    this.pixelGridCanvas.nativeElement.width = pixelGridSize.width;\n    this.pixelGridCanvas.nativeElement.height = pixelGridSize.height;\n  }\n\n  ngOnInit(): void {    \n    const { pixelGrid, tilesMatrix } = this.pixelGridService.buildTilesMatrix();\n    this.pixelGrid = pixelGrid;\n    this.tilesMatrix = tilesMatrix;\n  }\n\n  ngAfterViewInit(): void {\n    this.ctx = this.pixelGridCanvas.nativeElement.getContext('2d')!;\n    const nativeElement = this.pixelGridCanvas.nativeElement;\n    nativeElement.style.cursor = 'pointer';\n    nativeElement.addEventListener('click', this.handleMouseClick);\n    nativeElement.addEventListener('mousemove', this.handleMouseMove);\n    nativeElement.addEventListener('mouseout', this.handleMouseOut);\n\n    this.onResize();\n    this.ngZone.runOutsideAngular(() => this.loop());\n  }\n  \n  loop() {\n    \n    // this.ctx.save();\n    // this.ctx.clearRect(0, 0, this.pixelGridCanvas.nativeElement.width, this.pixelGridCanvas.nativeElement.height);\n\n    this.tilesMatrix.forEach(row => {\n      row.forEach(tile => {\n        // If the tile is a pixel, then paint base64 image to the ctx\n        if (tile.isPixel) {\n          const img = new Image();\n          img.src = tile.img!;\n          this.ctx.drawImage(img, tile.coordinates.x, tile.coordinates.y, tile.size.width + 1, tile.size.height + 1);\n        } else {\n          this.ctx.fillStyle = tile.color;\n          this.ctx.fillRect(tile.coordinates.x, tile.coordinates.y, tile.size.width, tile.size.height);\n        }\n      });\n    });\n\n    // this.ctx.restore();\n    requestAnimationFrame(() => this.loop());\n  }\n\n  handleMouseClick = (event: MouseEvent) => {\n    const rect = this.pixelGridCanvas.nativeElement.getBoundingClientRect();\n    const tile = this.pixelGridService.whatTileIsMouseOver(this.tilesMatrix, rect, event);\n    if (tile) this.tileClick.emit({ id: tile.id, href: tile.href ?? undefined });\n  }\n\n  currentTileBeingHovered: ITile | undefined;\n  handleMouseMove = (event: MouseEvent) => {\n    const rect = this.pixelGridCanvas.nativeElement.getBoundingClientRect();\n    const tile = this.pixelGridService.whatTileIsMouseOver(this.tilesMatrix, rect, event);\n    if (tile) {\n      if (this.currentTileBeingHovered && this.currentTileBeingHovered.id === tile.id) return;\n      if (this.tooltipRef) this.tooltipRef.detach();\n      if (this.currentTileBeingHovered && this.currentTileBeingHovered.id !== tile.id) {\n        this.currentTileBeingHovered.color = tile.color;\n      }\n\n      this.currentTileBeingHovered = tile;\n      this.currentTileBeingHovered.color = tile.hoverColor;\n\n      const positionStrategy = this.tooltipOverlay.position().global();\n      positionStrategy.top(`${event.clientY + 15}px`).left(`${event.clientX + 15}px`);\n      this.tooltipRef = this.tooltipOverlay.create({\n        positionStrategy,\n        hasBackdrop: false,\n        scrollStrategy: this.tooltipOverlay.scrollStrategies.reposition()\n      });\n\n      const tooltipComponent = this.tooltipRef.attach(this.tooltipPortal);\n      tooltipComponent.instance.text = tile.tooltipText ?? tile.id.toString();\n    }\n  }\n\n  handleMouseOut = () => {\n    if (this.currentTileBeingHovered) this.currentTileBeingHovered.color = this.pixelGridService.options.tileColor;\n    if (this.tooltipRef) this.tooltipRef.dispose();\n  }\n}\n\n\n@Component({\n  selector: 'ngx-pixel-grid-tooltip',\n  template: `<div class=\"tooltip\"><div class=\"tooltip-content\">{{text}}</div></div>`,\n  styles: [`\n    :host, .tooltip { pointer-events: none; }\n    .tooltip { \n      background-color: #000;\n      color: #fff;\n      padding: 5px 10px;\n      border-radius: 5px;\n    }\n  `],\n})\nexport class NgxPixelGridTooltipComponent {\n  @Input() text!: string;\n}","import { NgModule } from '@angular/core';\nimport { NgxPixelGridComponent } from './ngx-pixel-grid.component';\n\n\n@NgModule({\n  declarations: [\n    NgxPixelGridComponent\n  ],\n  imports: [\n  ],\n  exports: [\n    NgxPixelGridComponent\n  ]\n})\nexport class NgxPixelGridModule { }\n","/*\n * Public API Surface of ngx-pixel-grid\n */\n\nexport * from './lib/ngx-pixel-grid.service';\nexport * from './lib/ngx-pixel-grid.component';\nexport * from './lib/ngx-pixel-grid.module';\nexport * from './lib/interfaces/ngx-pixel-grid';\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './public-api';\n"],"names":["i1.NgxPixelGridService"],"mappings":"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"}