{"version":3,"file":"tmdjr-ngx-pixel-grid.mjs","sources":["../../../projects/ngx-pixel-grid/src/lib/classes/tile.ts","../../../projects/ngx-pixel-grid/src/lib/classes/pixel-grid.ts","../../../projects/ngx-pixel-grid/src/lib/ngx-pixel-grid.service.ts","../../../projects/ngx-pixel-grid/src/lib/ngx-pixel-grid.component.ts","../../../projects/ngx-pixel-grid/src/lib/ngx-pixel-grid.module.ts","../../../projects/ngx-pixel-grid/src/public-api.ts","../../../projects/ngx-pixel-grid/src/tmdjr-ngx-pixel-grid.ts"],"sourcesContent":["import { ICoordinates, ISize, ITile } from '../interfaces/ngx-pixel-grid';\n\nexport class Tile implements ITile {\n  constructor(\n    public id: string,\n    public isPixel: boolean,\n    public coordinates: ICoordinates,\n    public sourceCoordinates: ICoordinates,\n    public targetCoordinates: ICoordinates,\n    public size: ISize,\n    public color: string,\n    public hoverColor: string,\n    public tooltipText: string,\n  ) { }\n}","import { IPixelGrid, ISize, ITile } from '../interfaces/ngx-pixel-grid';\nimport { Tile } from './tile';\n\nexport class PixelGrid implements IPixelGrid {\n\n  tiles: ITile[] = [];\n  constructor(public rows: number, public columns: number, public gutter: number) { }\n\n  buildTilesMatrix(\n    tileSize: ISize,\n    tileColor: string,\n    tileHoverColor: string,\n  ): ITile[][] {\n    const tilesMatrix: ITile[][] = [];\n    for (let row = 0; row < this.rows; row++) {\n      tilesMatrix[row] = [];\n      for (let column = 0; column < this.columns; column++) {\n        tilesMatrix[row][column] = new Tile(\n          (row * this.columns + column).toString(),\n          false,\n          {\n            x: (tileSize.width + this.gutter) * column,\n            y: (tileSize.height + this.gutter) * row\n          },\n          { x: 0, y: 0 },\n          { x: 0, y: 0 },\n          tileSize,\n          tileColor,\n          tileHoverColor,\n          `Tile ${row * this.columns + column}`,\n        );\n        this.tiles.push(tilesMatrix[row][column]);      \n      }\n    }\n    return tilesMatrix;\n  }\n}\n","import { Inject, Injectable, InjectionToken, Optional } from '@angular/core';\nimport { PixelGrid } from './classes/pixel-grid';\nimport { IPixelGridOptions, IPixelGridService, ISize, ITile } from './interfaces/ngx-pixel-grid';\n\nexport const NGX_PIXEL_GRID_OPTIONS = new InjectionToken<IPixelGridOptions>('NGX_PIXEL_GRID_OPTIONS');\nconst defaultOptions: IPixelGridOptions = {\n  introAnimation: true,\n  gutter: 1,\n  rows: 100,\n  columns: 100,\n  tileSize: { width: 10, height: 10 },\n  tileColor: 'rgb(140, 140, 140)',\n  tileHoverColor: 'rgb(70, 70, 70)'\n};\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class NgxPixelGridService implements IPixelGridService {\n\n  constructor(@Optional() @Inject(NGX_PIXEL_GRID_OPTIONS) options: IPixelGridOptions) { \n    options && Object.assign(this.options, options);\n  }\n  options = defaultOptions;\n\n  createCtx(tilesMatrix: ITile[][], canvas: HTMLCanvasElement): CanvasRenderingContext2D {\n    const ctx = canvas.getContext('2d')!;\n    ctx.imageSmoothingEnabled = false;\n    const pixelGridSize = \n      this.getPixelGridSize(tilesMatrix, this.options.gutter);\n    canvas.width = pixelGridSize.width;\n    canvas.height = pixelGridSize.height;\n    canvas.style.cursor = 'pointer';\n    return ctx;\n  }\n\n  buildTilesMatrix(): { pixelGrid: PixelGrid, tilesMatrix: ITile[][] } {\n    const {\n      columns, rows, gutter,\n      tileSize, tileColor, tileHoverColor\n  } = this.options\n    const pixelGrid = new PixelGrid(columns, rows, gutter);\n    const tilesMatrix = pixelGrid.buildTilesMatrix(tileSize, tileColor, tileHoverColor);\n    return { pixelGrid, tilesMatrix};\n  }\n\n  getPixelGridSize(tilesMatrix: ITile[][], gutter: number): ISize {\n    const width = tilesMatrix[0].length * tilesMatrix[0][0].size.width + (tilesMatrix[0].length - 1) * gutter;\n    const height = tilesMatrix.length * tilesMatrix[0][0].size.height + (tilesMatrix.length - 1) * gutter;\n    return { width, height };\n  }\n\n  mergeTilesMatrix(tilesMatrix: ITile[][], tiles: ITile[]): ITile[][] {\n    tiles.forEach((tile: ITile) => {\n      const img = new Image();\n      img.src = tile.base64!;\n\n      const tileCoordinates = tile.coordinates;\n      const { x, y } = tileCoordinates;\n      const _tile = tilesMatrix[x][y];\n      Object.assign(_tile, {\n        isPixel: true,\n        img,\n        color: 'rbg(0, 0, 0)',\n        href: tile.href,\n        tooltipText: tile.tooltipText\n      });\n    });\n    return tilesMatrix;\n  }\n\n  whatTileIsMouseOver(tilesMatrix: ITile[][], rect: DOMRect, event: MouseEvent): ITile | undefined {\n    const x = event.clientX - rect.left;\n    const y = event.clientY - rect.top;\n\n    let returnTile: ITile | undefined;\n    tilesMatrix.forEach((row) => {\n      row.forEach((tile) => {\n        if (x >= tile.coordinates.x && x <= tile.coordinates.x + tile.size.width &&\n            y >= tile.coordinates.y && y <= tile.coordinates.y + tile.size.height) {\n            returnTile = tile;\n          }\n      });\n    });\n    return returnTile;\n  }\n\n  phyllotaxisLayout(tiles: ITile[], xOffset = 0, yOffset = 0, iOffset = 0): ITile[] {\n    // const theta = Math.PI * (6 - Math.sqrt(20));\n    // const pointRadius = 7;\n    const theta = Math.PI * (3 - Math.sqrt(10));\n    const pointRadius = 5;\n  \n    tiles.forEach((tile, i) => {\n        const index = (i + iOffset) % tiles.length;\n        const phylloX = pointRadius * Math.sqrt(index) * Math.cos(index * theta);\n        const phylloY = pointRadius * Math.sqrt(index) * Math.sin(index * theta);\n        tile.coordinates.x = xOffset + phylloX - pointRadius;\n        tile.coordinates.y = yOffset + phylloY - pointRadius;\n        tile.size.width = 3;\n        tile.size.height = 3;\n        // tile.color = `hsla(300, ${~~(40 * Math.random() + 60)}%, ${~~(60 * Math.random() + 20)}%, 1)`;\n    });\n  \n    return tiles;\n  }\n\n  gridLayout(tiles: ITile[]): ITile[] {\n    for (let row = 0; row < this.options.rows; row++) {\n      for (let column = 0; column < this.options.columns; column++) {\n        const tile = tiles[row * this.options.columns + column];\n        tile.coordinates.x = column * (this.options.tileSize.width + this.options.gutter);\n        tile.coordinates.y = row * (this.options.tileSize.height + this.options.gutter);\n        tile.size.width = 9;\n        tile.size.height = 9;\n        // tile.color = this.options.tileColor;\n      }\n    }\n    return tiles;\n  }\n}\n\n\nfunction getRandomArbitaryInt(min: number, max: number) {\n  return Math.floor(Math.random() * (max - min + 1)) + min;\n}","import { Overlay, OverlayRef } from '@angular/cdk/overlay';\nimport { ComponentPortal } from '@angular/cdk/portal';\nimport {\n  AfterViewInit,\n  ChangeDetectionStrategy,\n  Component,\n  ElementRef,\n  EventEmitter,\n  Input,\n  NgZone,\n  Output,\n  ViewChild,\n  ViewEncapsulation\n} from '@angular/core';\nimport { PixelGrid } from './classes/pixel-grid';\nimport { ITile, ITileClickEvent } from './interfaces/ngx-pixel-grid';\nimport { NgxPixelGridService } from './ngx-pixel-grid.service';\n\n@Component({\n  selector: 'ngx-pixel-grid',\n  template: `\n  <div #pixelGridCanvasContatiner class=\"pixel-grid-canvas-container\">\n    <canvas #pixelGridCanvas></canvas>\n  </div>`,\n  styles: ['.pixel-grid-canvas-container { width: 100%; height: 100%; }'],\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class NgxPixelGridComponent implements AfterViewInit {\n\n  constructor(\n    private ngZone: NgZone,\n    private pixelGridService: NgxPixelGridService,\n    private tooltipOverlay: Overlay\n  ) { }\n  \n  @Output() tileClick = new EventEmitter<ITileClickEvent>();\n\n  hasLoadedPixels = false;\n  @Input() set pixels(tiles: ITile[]) {\n    if (!tiles || !tiles.length) return;\n    this.hasLoadedPixels = true;\n    requestAnimationFrame(() => {\n      this.tilesMatrix = this.pixelGridService.mergeTilesMatrix(this.tilesMatrix, tiles);\n    });\n  }\n\n  @ViewChild('pixelGridCanvasContatiner') pixelGridCanvasContatiner!: ElementRef<HTMLDivElement>;\n  @ViewChild('pixelGridCanvas') pixelGridCanvas!: ElementRef<HTMLCanvasElement>;\n\n  ctx!: CanvasRenderingContext2D;\n  pixelGrid!: PixelGrid;\n  tilesMatrix!: ITile[][];\n\n  tooltipRef!: OverlayRef;\n  tooltipPortal = new ComponentPortal(NgxPixelGridTooltipComponent);\n\n  ngOnInit(): void {    \n    const { pixelGrid, tilesMatrix } = this.pixelGridService.buildTilesMatrix();\n    this.pixelGrid = pixelGrid;\n    this.tilesMatrix = tilesMatrix;\n  }\n\n  ngAfterViewInit(): void {\n    const canvas = this.pixelGridCanvas.nativeElement;\n    this.ctx = this.pixelGridService.createCtx(this.tilesMatrix, canvas);\n    canvas.addEventListener('click', this.handleMouseClick);\n    canvas.addEventListener('mousemove', this.handleMouseMove);\n    canvas.addEventListener('mouseout', this.handleMouseOut);\n    \n    this.ngZone.runOutsideAngular(() => requestAnimationFrame(this.loop.bind(this)));\n  }\n  \n\n  timeDelta = 0.005 * .05;\n  time = 0;\n  // switchLayout = true;\n  loop(timestamp: number): void {\n    \n    this.ctx.clearRect(0, 0, this.pixelGridCanvas.nativeElement.width, this.pixelGridCanvas.nativeElement.height);\n    // this.time += this.timeDelta;\n    this.time += (Math.sin(this.time) < 0 ? .3 : Math.cos(this.time) > 0.5 ? 0.3 : 0.8) * this.timeDelta;\n    \n    if (this.time > 1) {\n      this.time = 0;\n      // this.switchLayout = !this.switchLayout;\n    }\n      \n    this.pixelGrid.tiles.forEach(tile => {\n      tile.sourceCoordinates.x = tile.coordinates.x;\n      tile.sourceCoordinates.y = tile.coordinates.y;\n    });\n\n\n    let tiles = this.pixelGrid.tiles;\n    if(this.hasLoadedPixels) {\n      tiles = this.pixelGridService.gridLayout(this.pixelGrid.tiles);\n    } else {\n      tiles = this.pixelGridService.phyllotaxisLayout(\n        this.pixelGrid.tiles,\n        this.pixelGridCanvas.nativeElement.width * .5,\n        this.pixelGridCanvas.nativeElement.height * .5\n      );\n    }\n\n    tiles.forEach(tile => {\n      tile.targetCoordinates.x = tile.coordinates.x;\n      tile.targetCoordinates.y = tile.coordinates.y;\n      tile.coordinates.x = tile.sourceCoordinates.x * (1 - this.time) + tile.targetCoordinates.x * this.time;\n      tile.coordinates.y = tile.sourceCoordinates.y * (1 - this.time) + tile.targetCoordinates.y * this.time;\n      if (tile.isPixel) {\n        this.ctx.drawImage(tile.img!, tile.coordinates.x, tile.coordinates.y, tile.size.width + 1, tile.size.height + 1);\n      } else {\n        this.ctx.fillStyle = tile.color;\n        this.ctx.fillRect(tile.coordinates.x, tile.coordinates.y, tile.size.width, tile.size.height);\n      }\n    });   \n    requestAnimationFrame(this.loop.bind(this));\n  }\n\n  handleMouseClick = (event: MouseEvent) => {\n    const rect = this.pixelGridCanvas.nativeElement.getBoundingClientRect();\n    const tile = this.pixelGridService.whatTileIsMouseOver(this.tilesMatrix, rect, event);\n    tile && this.tileClick.emit({ id: tile.id, href: tile.href ?? undefined });\n  }\n\n  handleMouseOut = () => {\n    if (this.currentTileBeingHovered) {\n      this.currentTileBeingHovered.color = this.pixelGridService.options.tileColor;\n      this.currentTileBeingHovered = undefined;\n    }\n    this.tooltipRef.dispose?.();\n  }\n\n  currentTileBeingHovered: ITile | undefined;\n  handleMouseMove = (event: MouseEvent) => {\n    const rect = this.pixelGridCanvas.nativeElement.getBoundingClientRect();\n    const tile = this.pixelGridService.whatTileIsMouseOver(this.tilesMatrix, rect, event);\n    if (tile) {\n      // Kind of tricky here, want to leave comment for future reference\n      // We are just trying to swap out colors of the tile we are hovering on\n      // So a refernce is made to the tile we are hovering on and the color is changed\n      // If the tile that is currently being hovered on is the same as the tile we are hovering on, return\n      if (this.currentTileBeingHovered && this.currentTileBeingHovered.id === tile.id) return;\n      // If the tooltip is open, close it\n      // !@TODO - Should only detach if the new tile is on same tile group as the last\n      if (this.tooltipRef) this.tooltipRef.detach();\n      // If the tile that is currently being hovered on is different than the tile we are hovering on, \n      // we need to change the color back to the original color\n      if (this.currentTileBeingHovered && this.currentTileBeingHovered.id !== tile.id) {\n        this.currentTileBeingHovered.color = tile.color;\n      }\n\n      // Set the reference to the tile we are hovering on\n      this.currentTileBeingHovered = tile;\n\n      // Change the color of the tile we are hovering on to the hover color\n      this.currentTileBeingHovered.color = tile.hoverColor;\n\n      const positionStrategy = this.tooltipOverlay\n      .position().global()\n      .top(`${event.clientY + 15}px`)\n      .left(`${event.clientX + 15}px`);\n\n      this.tooltipRef = this.tooltipOverlay.create({\n        positionStrategy,\n        hasBackdrop: false,\n        scrollStrategy: this.tooltipOverlay.scrollStrategies.close()\n      });\n\n      const tooltipComponent = this.tooltipRef.attach(this.tooltipPortal);\n      tooltipComponent.instance.text = tile.tooltipText ?? tile.id.toString();\n    }\n  }\n}\n\n@Component({\n  selector: 'ngx-pixel-grid-tooltip',\n  template: `<div class=\"tooltip\"><div class=\"tooltip-content\">{{text}}</div></div>`,\n  styles: [`.tooltip {  background-color: #000; color: #fff; padding: 5px 10px; border-radius: 5px; }`],\n  encapsulation: ViewEncapsulation.ShadowDom\n})\nexport class NgxPixelGridTooltipComponent { @Input() text!: string; }\n","import { NgModule } from '@angular/core';\nimport { NgxPixelGridComponent } from './ngx-pixel-grid.component';\n\n\n@NgModule({\n  declarations: [\n    NgxPixelGridComponent\n  ],\n  imports: [\n  ],\n  exports: [\n    NgxPixelGridComponent\n  ]\n})\nexport class NgxPixelGridModule { }\n","/*\n * Public API Surface of ngx-pixel-grid\n */\n\nexport * from './lib/ngx-pixel-grid.service';\nexport * from './lib/ngx-pixel-grid.component';\nexport * from './lib/ngx-pixel-grid.module';\nexport * from './lib/interfaces/ngx-pixel-grid';\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './public-api';\n"],"names":["i1.NgxPixelGridService"],"mappings":"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"}