import { Inject, Injectable, InjectionToken, Optional } from '@angular/core';
import { PixelGrid } from './classes/pixel-grid';
import * as i0 from "@angular/core";
export const NGX_PIXEL_GRID_OPTIONS = new InjectionToken('NGX_PIXEL_GRID_OPTIONS');
const defaultOptions = {
    introAnimation: true,
    gutter: 1,
    rows: 100,
    columns: 100,
    tileSize: { width: 10, height: 10 },
    tileColor: 'rgb(140, 140, 140)',
    tileHoverColor: 'rgb(70, 70, 70)'
};
export class NgxPixelGridService {
    constructor(options) {
        this.options = defaultOptions;
        options && Object.assign(this.options, options);
    }
    buildTilesMatrix() {
        const { columns, rows, gutter, tileSize, tileColor, tileHoverColor } = this.options;
        const pixelGrid = new PixelGrid(columns, rows, gutter);
        const tilesMatrix = pixelGrid.buildTilesMatrix(tileSize, tileColor, tileHoverColor);
        return { pixelGrid, tilesMatrix };
    }
    getPixelGridSize(tilesMatrix, gutter) {
        const width = tilesMatrix[0].length * tilesMatrix[0][0].size.width + (tilesMatrix[0].length - 1) * gutter;
        const height = tilesMatrix.length * tilesMatrix[0][0].size.height + (tilesMatrix.length - 1) * gutter;
        return { width, height };
    }
    mergeTilesMatrix(tilesMatrix, tiles) {
        tiles.forEach((tile) => {
            const tileCoordinates = tile.coordinates;
            const { x, y } = tileCoordinates;
            const _tile = tilesMatrix[x][y];
            Object.assign(_tile, {
                isPixel: true,
                img: tile.img,
                color: 'rbg(0, 0, 0)',
                href: tile.href,
                tooltipText: tile.tooltipText
            });
        });
        return tilesMatrix;
    }
    whatTileIsMouseOver(tilesMatrix, rect, event) {
        const x = event.clientX - rect.left;
        const y = event.clientY - rect.top;
        let returnTile;
        tilesMatrix.forEach((row) => {
            row.forEach((tile) => {
                if (x >= tile.coordinates.x && x <= tile.coordinates.x + tile.size.width &&
                    y >= tile.coordinates.y && y <= tile.coordinates.y + tile.size.height) {
                    returnTile = tile;
                }
            });
        });
        return returnTile;
    }
    phyllotaxisLayout(tilesMatrix, xOffset = 0, yOffset = 0, iOffset = 0) {
        // theta determines the spiral of the layout
        const theta = Math.PI * (3 - Math.sqrt(5));
        const pointRadius = this.options.tileSize.width / 2;
        tilesMatrix.forEach((row, i) => {
            const index = (i + iOffset) % tilesMatrix.length;
            const phylloX = pointRadius * Math.sqrt(index) * Math.cos(index * theta);
            const phylloY = pointRadius * Math.sqrt(index) * Math.sin(index * theta);
            row.forEach(tile => {
                tile.coordinates.x = xOffset + phylloX - pointRadius;
                tile.coordinates.y = yOffset + phylloY - pointRadius;
            });
        });
        return tilesMatrix;
    }
}
NgxPixelGridService.ɵfac = function NgxPixelGridService_Factory(t) { return new (t || NgxPixelGridService)(i0.ɵɵinject(NGX_PIXEL_GRID_OPTIONS, 8)); };
NgxPixelGridService.ɵprov = /*@__PURE__*/ i0.ɵɵdefineInjectable({ token: NgxPixelGridService, factory: NgxPixelGridService.ɵfac, providedIn: 'root' });
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(NgxPixelGridService, [{
        type: Injectable,
        args: [{
                providedIn: 'root'
            }]
    }], function () { return [{ type: undefined, decorators: [{
                type: Optional
            }, {
                type: Inject,
                args: [NGX_PIXEL_GRID_OPTIONS]
            }] }]; }, null); })();
//# sourceMappingURL=data:application/json;base64,